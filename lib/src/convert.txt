# -> //
@ -> _
def -> 
end -> }
Test::Field1 -> Test.Field1
                class Test{ static final Field1 = ... }
Hash.new(0) -> new Map();
nil -> null
:none -> null/*:none*/


row.each_with_index do |cell, x| => each_with_index(row,(cell,x) { ... })

attr_reader :x -> Type get x=>_x;
                  Type _x;
                  
attr_accessor :y -> Type y;
                  
dead_ends.each do |(x, y)| => dead_ends.forEach((item) { var x = item.x; var y = item.y; ...}

.any? => .isNotEmpty
.empty? => isEmpty

set = lambda do |x, y, direction, *recip| => set(x, y, direction, *recip){ ...

rand(100) -> _rnd.nextInt(100)


// assert_equal ([^,]*), (.*$) -> expect($1,equals($2));
assert_equal maze.width, maze.height -> 

// \[([^,]+),([^\]]+)\] -> [new Position.xy($1,$2)]
// \[([^,]+),([^\]]+)\] = ([^;]+) -> .setCell($1,$2,$3)
// \[([^,]+),([^\]]+)\] -> .getCell($1,$2)